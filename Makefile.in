
MODULENAME=@PACKAGE_NAME@
ID=@PACKAGE_BUGREPORT@
XPI=$(ID).xpi
JS=@COTERMINAL_JS_PATH@ 
ZIP=@ZIP@
ASCIIDOC=@ASCIIDOC@

MSTART="$$(tput setaf 2)====================\>$$(tput setaf 6)"
MEND="$$(tput sgr0)"
ESTART="$$(tput bold; tput setaf 1)"
EEND="$$(tput sgr0; tput setaf 6)"

all: $(XPI) coterminal-docs.zip

coterminal-docs.zip: doc/usermanual.html
	@echo "$(MSTART) Create documentation package....$(MEND)" 
	$(RM) $@
	cd doc && $(ZIP) ../$@ *.html images/*.png
	@echo "$(MSTART) Done.$(MEND)" 

Makefile: Makefile.in configure
	@echo "$(MSTART) Regenerating Makefile....$(MEND)" 
	./configure
	@echo "$(MSTART) Done.$(MEND)" 

configure: configure.ac acgecko.m4 acplatform.m4
	@echo "$(MSTART) Regenerating configure file....$(MEND)" 
	autoconf
	@echo "$(MSTART) Done.$(MEND)" 

modules/config.js: modules/config.js.in configure
	./configure

chrome.manifest: chrome.manifest.in configure
	./configure

install.rdf: install.rdf.in configure
	./configure

content-build:
	$(MAKE) -C chrome/content

document-build: doc/usermanual.html

doc/usermanual.html: doc/usermanual.txt
	@echo "$(MSTART) Regenerating configure file....$(MEND)" 
	@echo Generating user manual.
	$(MAKE) -C doc
	@echo "$(MSTART) Done.$(MEND)" 

modules-build:
	$(MAKE) -C modules

.PHONY: modules-build content-build document-build lint

$(XPI): lint chrome.manifest install.rdf coterminal-docs.zip
	@echo "$(MSTART) Make xpi package....$(MEND)" 
	$(RM) $@
	$(ZIP) $@ install.rdf \
		bootstrap.js \
		modules/*.{js,jsm,py,conf} \
		modules/images/*.{jpg,png} \
		modules/common/*.js \
		modules/locale/*.js \
		modules/core/*.js \
		modules/standard/*.js \
		modules/autoload/*.js \
		modules/plugin/*.js \
		| sed -e "s/\(adding:\) \([^(]*\)(deflated \([0-9]*%\)/`tput setaf 5`\\1 `tput setaf 3`\\2`tput sgr0` (deflated `tput setaf 6`\\3`tput sgr0`/g"
	@echo "$(MSTART) Done.$(MEND)\n" 


lint: 
	@echo "$(MSTART) Ckecking JavaScript syntax error....$(MEND)" 
	# Check syntax errors.
	@for file in $$(find $$PWD | egrep "\.js$$|\.jsm$$"); do \
		for version in 185; do \
			if [ @host_os@ = cygwin ]; then file=$$(cygpath -wa $$file); fi; \
			cd $$(dirname $(JS)) && $(JS) -C -v $$version -o strict -o werror -f $$file || exit; \
		done; \
	done;
	##new js shell
	#@for file in $$(find $$PWD | egrep "\.js$$|\.jsm$$"); do \
	#	if [ @host_os@ = cygwin ]; then file=$$(cygpath -wa $$file); fi; \
	#	echo "var a = function(){" | cat - $$file | sed -e '$$a\}' | $(JS) -f - || exit; \
	#done;
	#@echo "$(MSTART) Done.$(MEND)\n" 

clean:
	@echo "$(MSTART) Cleaning $(ESTART)$(CD)$(EEND)....$(MEND)" 
	$(RM) $(XPI)
	@echo "$(MSTART) Done.$(MEND)\n" 
	$(MAKE) -C modules $@

maintainer-clean: clean
	@echo "$(MSTART) Cleaning configuration info....$(MEND)"
	$(RM) $(RM) Makefile chrome.manifest install.rdf config.status
	@echo "$(MSTART) Done.$(MEND)\n"
	$(MAKE) -C modules $@

dev:
	ln -f $(PWD)/tools/gitignore .gitignore	
	ln -f $(PWD)/tools/vimprojects .vimprojects


install-vimperator:
	case @host_os@ in \
		cygwin*) \
			cmd /c mklink /D $$(cygpath -w $$(cygpath $$USERPROFILE)/vimperator/coterminal) $$(cygpath -w $(PWD)); \
			ln -f $(PWD)/modules/corun.js ~/vimperator/plugin/ \
			;; \
		*) \
			ln -sf $(PWD) ~/.vimperator/coterminal; \
			ln -f $(PWD)/modules/corun.js ~/.vimperator/plugin/ \
			;; \
	esac

uninstall-vimperator:
	case @host_os@ in \
		cygwin*) \
			rm $$(cygpath $$USERPROFILE)/vimperator/plugin/corun.js \
			;; \
		*) \
			rm ~/.vimperator/plugin/corun.js \
			;; \
	esac \

install-extension:
	case @host_os@ in \
		Darwin*|darwin*) \
			PROFILE_ROOT=~/Library/Application\ Support/Firefox/Profiles \
			;; \
		linux*) \
			PROFILE_ROOT=~/.mozilla/firefox \
			;; \
		cygwin*) \
			PROFILE_ROOT=$$(cygpath $$APPDATA\\Mozilla\\Firefox\\Profiles) \
			;; \
	esac \
	&& PROFILES=$$(ls "$$PROFILE_ROOT") \
	&& echo $$PROFILE_ROOT \
	&& for PROFILE in $$PROFILES;  \
	do \
		case @host_os@ in \
			cygwin*) \
				cmd /c mklink /d $$(cygpath -w "$$PROFILE_ROOT/$$PROFILE/extensions/$(ID)") $$(cygpath -w $(PWD)) \
				;; \
			*) \
				[ -e "$$PROFILE_ROOT/$$PROFILE" ] && ln -sf $(PWD) "$$PROFILE_ROOT/$$PROFILE/extensions/$(ID)"; \
				;; \
		esac \
	done;

uninstall-extension:
	case @host_os@ in \
		Darwin|darwin*) \
			PROFILE_ROOT=~/Library/Application\ Support/Firefox/Profiles \
			;; \
		linux*) \
			PROFILE_ROOT=~/.mozilla/firefox \
			;; \
		cygwin*) \
			PROFILE_ROOT=$$(cygpath $$APPDATA\\Mozilla\\Firefox\\Profiles) \
			;; \
	esac \
	&& PROFILES=$$(ls $$PROFILE_ROOT) \
	&& for PROFILE in $$PROFILES;  \
	do \
		rm -f $$PROFILE_ROOT/$$PROFILE/extensions/$(ID); \
	done;

run-xulapp:
	case @host_os@ in \
		Darwin|darwin*) \
			open /Applications/Aurora.app \
				-n --args --app $(PWD)/application.ini \
			;; \
		Linux*) \
			firefox --app application.ini \
			;; \
		cygwin*) \
			cygstart firefox --app application.ini \
			;; \
	esac	

update: all
	rm -r -f /var/www/coterminal/*/ && rm -f /var/www/coterminal/*
	cp coterminal@zuse.jp.xpi /var/www/coterminal/
	unzip coterminal-docs.zip -d /var/www/coterminal/

