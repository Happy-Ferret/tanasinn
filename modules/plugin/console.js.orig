
let EXPORTED_SYMBOLS = ["ConsoleWindowPlugin"];

let genericMessageFilter = function genericMessageFilter(logtext) {

  this.logtext = logtext;
  this.match = logtext.match(
      /^\[(.+?): "coTerminal: (.+?)" {file: "(.+?)" line: ([0-9]+?)( name: "(.*?)")?}\]$/m);
  return this.match ? this: null;
}

genericMessageFilter.prototype.action = function action() {
  let [logtext, match] = [this.logtext, this.match];
  let line = match[4];
  let file = match[3];
  let message = match[2];
  let category = match[1];
  return {
    tagName: 'hbox',
    style: {
      borderBottom: '1px solid green',
      backgroundColor: category == 'JavaScript Warning' ? 'lightyellow'
                      : category == 'JavaScript Error' ? 'lightpink'
                      : category == 'Native Message' ? 'silver'
                      : 'lightblue'
    },
    childNodes: [
      { tagName: 'label', innerText: message },
      { tagName: 'label', innerText: file.split(' ').pop(), style: { color: 'red' } },
      { tagName: 'label', innerText: 'line: ' + line }
    ]
  };
}

function appendMessage(uiManager, debugBox, logtext) {
  if (debugBox.scrollTop + parseInt(debugBox.style.height) == debugBox.scrollHeight)
    coUtils.setTimeout(function() debugBox.scrollTop = debugBox.scrollHeight);
  let filter = new genericMessageFilter(logtext);
  if (filter && filter.match) {
    let template = filter.action();
    let element = uiManager.createElementsFromTemplate(template);
    debugBox.appendChild(element);
  } else {
    uiManager.createElementsFromTemplate({
      parentNode: debugBox,
      tagName: 'vbox',
      style: { borderBottom: '1px solid green' },
      childNodes: [
        { tagName: 'vbox', innerText: logtext }
      ]
    });
  }
}


const ConsoleWindowPlugin = function ConsoleWindowPlugin() this.initialize.apply(this, arguments);
ConsoleWindowPlugin.prototype = {

  __debugBox: null

  ,initialize: function initialize(session) {
    let self = this;
    session.subscribeLocalEvent('uimanager-root-window-created', 
      function onRootWindowCreated(uiManager) {
        let debugBox = this.__debugBox = uiManager.createElementsFromTemplate({
          parentNode: uiManager.vboxElement,
          tagName: 'vbox',
          style: {
            height: '180px', 
            overflowY: 'auto', 
            backgroundColor: 'white',
            wordWrap: 'break-word',
            fontSize: '13px',
            fontWeight: 'bold',
          }
        });
        debugBox.addEventListener('dragstart', function(event) {
          event.stopPropagation();
        }, false);

        let consoleService = Components
          .classes["@mozilla.org/consoleservice;1"]
          .getService(Components.interfaces.nsIConsoleService);

        // define observer XPCOM object 
        // which implements nsIConsoleListener interface.
        let listener = {
          observe: function(aMessage) {
            try {
              let message = aMessage.message;
              if (/coterminal/i.test(message, 'i')) {
                appendMessage(uiManager, debugBox, message);
              }
            } catch (e) {
              //alert(e.filename + '\n' + e.lineNumber + '\n' + e)
              try {
                this.unregister(this);
                coUtils.reportError(e);
              } catch (e) {
                // Nothing to do.
                // To guard against stack overflow, 
                // we MUST not emit any console output.
              }
            }
          }

          ,register: function() {
            // register listener.
            consoleService.registerListener(this);
          }

          // define unregistering function.
          ,unregister: function() {
            coUtils.reportMessage('Unregister listener. from console service.');
            consoleService.unregisterListener(this);
            coUtils.reportMessage('Succeeded to unregister console listener.');
          }

          ,getMessageArray: function() {
            // get latest 250 messages.
            let messageArray = {};
            consoleService.getMessageArray(messageArray, {});
            return messageArray;
          }
        };
        
        // set unregistration listener.
        session.subscribeLocalEvent('session-stopping', 
            function() listener.unregister());
        session.subscribeLocalEvent('session-window-close', 
            function() listener.unregister());
        coUtils.subscribeGlobalEvent('quit-application', 
            function() listener.unregister());

        // register object which implements nsIConsoleListener.
        listener.register();

        // in case messages are not found, consoleService returns null.
        let messageArray = listener.getMessageArray();
        if (null !== messageArray) {
            messageArray.value.forEach(
              function(aMessage) listener.observe(aMessage));
        }
      }
    );
  }
};


