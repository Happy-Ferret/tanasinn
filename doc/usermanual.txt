#include "define.h"

= tanasinn terminal emurator 

#if __EN__
link:./usermanual-ja.html[日本語/Japanese]
#elif __JP__
link:./usermanual.html[English/英語]
#endif

#if __EN__

== Overview

    Here is a terminal emurator that runs on Firefox/Thunderbird/SeaMonkey.
    It enables you to access flexible, powerful functionality 
    provided by operating systems, such as commandline shells, or curses-based 
    applications.

#elif __JP__

== 概要

    "tanasinn terminal emurator" は Firefox/Thunderbird/SeaMonkey上で動作する端末エミュレータです。
    コマンドラインシェルやcursesベースのアプリケーション等、オペレーティングシステムが提供する
    柔軟でパワフルな機能群にブラウザ上のUIからアクセスすることができます。

#endif

#if __EN__

=== Download/License
    This software is distributed under Mozilla Public License 1.1 (MPL1.1) .

- Developping version (PACKAGE_VERSION): http:/#/zuse.jp/tanasinn/downloads/versions/PACKAGE_VERSION/TANASINN_XPI_ID.xpi[Download]
- Unstable, Snapshot version (it may so bugful!): http:/#/zuse.jp/tanasinn/tanasinn-current.xpi[Download]

#elif __JP__

=== ダウンロード/ライセンス
    Mozilla Public License 1.1 (MPL1.1) で配布しています。 

- 開発版 (PACKAGE_VERSION): http:/#/zuse.jp/tanasinn/downloads/versions/PACKAGE_VERSION/TANASINN_XPI_ID.xpi[ダウンロード].
- スナップショット版: http:/#/zuse.jp/tanasinn/tanasinn-current.xpi[ダウンロード]

#endif

- git repo: TANASINN_GIT_REPOSITORY
- gitweb: http:/#/zuse.jp/git/?p=tanasinn.git

#if __EN__
== Hilighting features
    - Full Gecko based user interface (HTML Canvas + XUL), it is flexible and easy to customize.
    - Multi-platform, now supports Mac / FreeBSD / Linux (Tested in Ubuntu) / 
      Windows(XP/Vista/7) + http:/#/www.cygwin.com[Cygwin] (requires posix python).
    - Supports plugin architecture. it supports Plug-and-Play installing & uninstalling.
    - Retaining TTY session duaring closing/restarting browser.
      you can reconnect suspended terminal session.
    - Including debugger. You can run it in step-execution-mode or trace-mode 
      and observe terminal I/O sequence in real-time.
    - Supports basic features, scrollback, alternate screen, visual bell, audio bell ...etc.
    - IME is supported.
    - Supports east asian double width characters. 
      but it is not render bidi languages correctly.
    - Localization supported. It is using gettext-style method. you can edit localize resource on UI.
    - You can selects variable character encoding supported by Gecko.
    - Supports transparent window. it is useful when www-browseing while working at terminal.
    - xterm-like mouse emuration. supports smoothing pixel scroll.
    - Text selection / Rectangle text selection.
    - Supports copy / paste in Drag & Drop or keyboard shortcut.
    - Supports move / resize through draging operation.
    - Supports 256 terminal colors, you can assign 32bit colors for them.
    - Vimperator / Keysnail like commandline interface.
    - It can be installed as a plugin for Vimperator/Muttator. It hooks "<C-i>" and "gF" mappings if you want.
    - Running as standalone XUL application if you want. (but now buggy!)
#elif __JP__
== 特色
    - Geckoベースのユーザーインターフェース (HTML Canvas + XUL)。柔軟でカスタマイズが容易です。
    - マルチプラットフォーム。現在サポートされるのは、Mac / FreeBSD / Linux(というかUbuntu) / 
      Windows(XP/Vista/7) + http:/#/www.cygwin.com[Cygwin]環境 (POSIX版Pythonが必要)
    - プラグインアーキテクチャ。プラグアンドプレイでのインストール・アンインストールが可能。
    - ブラウザを再起動したり閉じたりしている間、ターミナルセッションを保持します。
      サスペンドしたセッションに後から再接続できます。 
    - デバッガ内臓。ステップ実行やトレースができます。
      ターミナルとアプリケーションがやり取りするI/Oシーケンスをリアルタイムで観察できます。
    - スクロールバック、代替スクリーン、ビジュアルベル、オーディオベルなど基本的な機能はサポートしています。
    - IMEが使えます。
    - East Asian Width(ひらがななどの文字幅を考慮したレンダリング)に一応対応しています。 
      bidiには対応できていないと思います。
    - 地域化のサポート。gettextのようなスタイルを採用しています。
      ローカライズリソースをUI上から編集することができます。
    - Geckoがサポートする様々なエンコーディングを指定できます。
    - ウィンドウの透明化をサポート。これはブラウジングしながらターミナルで作業したい時に便利です。
    - xtermのようなマウスエミュレーションができます。ピクセルスクロールにも対応。
    - テキストの選択や矩形選択ができます。
    - ドラッグアンドドロップやキーボードショートカットによる選択テキストのコピー・ペーストが可能です。
    - ドラッグによる移動・リサイズができます。
    - 256色表示対応。32bitカラーをパレットに割り当てることができます。
    - VimperatorやKeysnailのようなコマンドラインインターフェース。
    - Vimperator/Muttator のプラグインとして導入することができます。必要なら"<C-i>"や"gF"マッピングをフックすることができます。
    - スタンドアロンのXULアプリケーションとして動作させることができます。(現在はかなりバギーです!)
#endif

#if __EN__
#elif __JP__
#endif


#if __EN__
== Screenshots
#elif __JP__
== スクリーンショット
#endif

#if __EN__
.Running "http:/#/w3m.sourceforge.net/index.en.html[BB]", an ascii art demo program.
#elif __JP__
."http:/#/w3m.sourceforge.net/index.en.html[BB]"(アスキーアートのデモプログラム)を走らせたところ。
#endif
image::images/bb2.png[width=780]

#if __EN__
.Displaying color chart with http:/#/code.google.com/p/myminios/source/browse/trunk/colortable16.sh?r=10[colortable.sh] and http:/#/code.google.com/p/joeldotfiles/source/browse/trunk/256colors2.pl[256color2.pl].
#elif __JP__
.http:/#/code.google.com/p/myminios/source/browse/trunk/colortable16.sh?r=10[colortable.sh] and http:/#/code.google.com/p/joeldotfiles/source/browse/trunk/256colors2.pl[256color2.pl]でカラーチャートを表示させたところ。
#endif
image::images/color2.png[width=780]

#if __EN__
.Typing Japanese with IME (here is http:/#/aquaskk.sourceforge.jp/[AquaSKK]).
#elif __JP__
.IMEで日本語を打ってみたところ (http:/#/aquaskk.sourceforge.jp/[AquaSKK]使用)。
#endif
image::images/ime2.png[width=780]

#if __EN__
.Scrollbar interface emerges only when it is needed (like OSX Lion).
#elif __JP__
.スクロールバーインターフェースは必要なときにあらわれます(OSX Lionのように)。
#endif
image::images/scroll2.png[width=780]

#if __EN__
.Overlay indicator dislays various messages. it emerges when font size / window size / titlebar message is chenged.
#elif __JP__
.オーバーレイインジケータがフォントサイズ、ウィンドウサイズ、タイトルバーメッセージが変更されたときなどに表示されます。
#endif
image::images/overlay2.png[width=780]

#if __EN__
.Commandline interface inspired by http:/#/vimperator.org/vimperator[Vimperator] / https:/#/github.com/mooz/keysnail/wiki/[Keysnail] (here is fgcolor command).
#elif __JP__
.http:/#/vimperator.org/vimperator[Vimperator] や https:/#/github.com/mooz/keysnail/wiki/[Keysnail] にインスパイアされたコマンドラインインターフェース。
#endif
image::images/completion2.png[width=780]

#if __EN__
.Choosing font-family.
#elif __JP__
.フォントファミリを選択しています。
#endif
image::images/fontfamily2.png[width=780]

#if __EN__
.Selecting font-size.
#elif __JP__
.フォントサイズを選択しています。
#endif
image::images/fontsize2.png[width=780]

#if __EN__
.Launcher interface inspired by http:/#/www.blacktree.com/[QuckSilver] / https:/#/addons.mozilla.org/ja/firefox/addon/mozilla-labs-ubiquity/[Ubiquity].
#elif __JP__
.http:/#/www.blacktree.com/[QuckSilver] や https:/#/addons.mozilla.org/ja/firefox/addon/mozilla-labs-ubiquity/[Ubiquity] にインスパイアされたランチャーインターフェース。
#endif
image::images/launcher2.png[width=780]

#if __EN__
.Reconnecting a detached session. It is all OK if your browser will crash or restart unexpectedly.
#elif __JP__
.デタッチ済みのセッションに再接続しているところ。ブラウザがクラッシュしたり再起動しても安心です。
#endif
image::images/session2.png[width=780]

#if __EN__
.running "http:/#/www.tkl.iis.u-tokyo.ac.jp/~toyoda/index_e.html[sl]" (a joke software).
#elif __JP__
."http:/#/www.tkl.iis.u-tokyo.ac.jp/~toyoda/index_e.html[sl]" (ジョークウェア)を走らせたところ。
#endif
image::images/sl2.png[width=780]

#if __EN__
.Self-Debugging and tracing terminal I/O sequence in real-time.
#elif __JP__
.セルフデバッギング。ターミナルI/Oシーケンスをリアルタイムにトレースしています。
#endif
image::images/debug2.png[width=780]

#if __EN__
.Browser-in-browser. running http:/#/w3m.sourceforge.net/index.en.html[w3m] (applied private patch) with inline images. How crazy!!!
#elif __JP__
.ブラウザの中でブラウザ。プライベートパッチを当てたhttp:/#/w3m.sourceforge.net/index.en.html[w3m]でインラインイメージを表示させました。ここまでくるとちょっと意味不明ですね。
#endif
image::images/w3m2.png[width=780]

#if __EN__
.Mailer-in-mailer. running http:/#/www.gohome.org/wl/index.html[Wonderlust] on emacs on Thunderbird.
#elif __JP__
.メーラーの中でメーラー。http:/#/www.gohome.org/wl/index.html[Wonderlust]をemacs上で動かしているものをThunderbird上で動かしています。
#endif
image::images/wl3.png[width=780]

#if __EN__
.Meta-developing tanasinn with tanasinn at out of jail. it runs as a standalone XUL application.
#elif __JP__
.tanasinnをtanasinnでメタ開発中。これはスタンドアロンXULアプリケーションとして動作させているところです。
#endif
image::images/xulapp.png[width=780]


#if __EN__

== Features in future...

    * Improving emuration. now emuration engine is running with xterm compatible mode. 
      but it ought to read terminfo entries.
    * Supporting color scheme. import/export color palette contains 16 or 256 colors.
    * Supporting skins. you can make it otakunized.
    * Making it to be more collaborative with curses-based applications.
      Accessing to Gecko and do something like opening popup windows, playing movies, 
      OAuth authorication, ...etc., from terminal applications. 
      We're dreaming of enjoying youtube or twitter with no plugins, from terminal, don't you?
    * Documents for plug-in developers are comming soon... - -;)

#elif __JP__
== 将来的にサポートされる仕様
    
    * エミュレーションの強化。今はとりあえずxterm系コンパチブルなエミュレーションで作ってますが、
      本来はterminfoエントリを見るべきでしょう。
    * カラースキーマのサポート。16色or256色のパレットをインポート/エクスポートできるように。
    * スキンのサポート。痛端末化が可能に。
    * cursesベースのアプリーションとの連携強化。
      端末アプリケーションからGeckoにアクセスしてポップアップとか動画表示とかOAuthとかやるための仕様の策定。
      特別なプラグインを書かずとも端末からyoutube見たりtwitterやったりできるようになります。
    * プラグイン開発用ドキュメント。

#endif


#if __EN__
== Requirements
    - Firefox 4.02pre+ / Thunderbird 5.0+ / SeaMonkey 2.1+.
    - Python for POSIX (2.5+, Mac, FreeBSD, Linux, or cygwin version)
      Python for Win32, ActivePython, etc... are not well.
      because this software depends on many posix functions 
      'os.fork', 'os.openpty' ..etc.
    - Posix enviroinment. 
      If you are running Windows, you need to install cygwin at C:\cygwin.
#elif __JP__
== 動作要件
    - Firefox 4.02pre+ / Thunderbird 5.0+ / SeaMonkey 2.1+.
    - POSIX用にビルドされたPython (2.5+, Mac、FreeBSD、Linux、 または cygwin用のもの)。
      Python for Win32 や ActivePython 等はforkや仮想端末をサポートしないと思うのでダメしょう。
    - POSIX環境。 
      もしWindowsをお使いでしたら、C:\cygwinにCygwinをインストールしてください。
#endif

#if __EN__
== Installing
#elif __JP__
== インストール
#endif

#if __EN__

=== Building Firefox/Thunderbird/SeaMonkey extension:
.Mac, FreeBSD, Linux, Cygwin
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
make
----
    If build process is succeeded, target XPI file 
    TANASINN_XPI_ID is to be generated. enjoy it!
#elif __JP__

=== Firefox/Thunderbird/SeaMonkey拡張としてビルドする:
.Mac, FreeBSD, Linux, Cygwin
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
make
----
    ビルドが成功すると、TANASINN_XPI_IDというXPIファイルが生成されます。
    これをインストールしてください。
#endif
    
#if __EN__
=== Installing as Vimperator/Muttator plugin:

    Make some links into Vimperator/Muttator runtime directory as following:

.Mac, FreeBSD, Linux
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
ln -s $PWD $RUNTIME/tanasinn
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/ 
----
        
.Windows Vista/7 + Cygwin
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
$(cygpath $COMSPEC) /c mklink /D "$(cygpath -w "$RUNTIME/tanasinn")" "$(cygpath -w "$PWD")";
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/
----

.Windows XP + Cygwin
To make Windows native symbolic link, you may need to install http:/#/www.microsoft.com/download/en/details.aspx?DisplayLang=en%2cen&id=17657[Windows Server 2003 Resource Kit Tools].

----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
$(cygpath $COMSPEC) /c linkd.exe "$(cygpath -w "$RUNTIME/tanasinn")" "$(cygpath -w "$PWD")";
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/
----

    $RUNTIME is Vimperator/Muttator runtime directory such as '$HOME/.{vimperator,muttator}'.
#elif __JP__
=== Vimperator/Muttatorプラグインとしてインストール:

    Vimperator/Muttatorのランタイムディレクトリ以下にリンクを作成します。

.Mac, FreeBSD, Linux
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
ln -s $PWD $RUNTIME/tanasinn
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/ 
----
        
.Windows Vista/7 + Cygwin
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
$(cygpath $COMSPEC) /c mklink /D "$(cygpath -w "$RUNTIME/tanasinn")" "$(cygpath -w "$PWD")";
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/
----

.Windows XP + Cygwin
Windowsネイティブなシンボリックリンクを作成するために、http:/#/www.microsoft.com/download/en/details.aspx?DisplayLang=en%2cen&id=17657[Windows Server 2003 Resource Kit Tools] をインストールする必要があるかもしれません。

----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
$(cygpath $COMSPEC) /c linkd.exe "$(cygpath -w "$RUNTIME/tanasinn")" "$(cygpath -w "$PWD")";
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/
----

    $RUNTIMEは'$HOME/.{vimperator,muttator}'のようなVimperator/Muttatorのランタイムディレクトリです。
#endif

#if __EN__
=== Running as XUL Application (advanced, unstable, it does not works well...):
#elif __JP__
=== XULアプリケーションとして起動 (不安定、うまく動かないかもしれません):
#endif
    
.MacOSX
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
open /Applications/Firefox.app --args --app $(PWD)/application.ini
----

.Linux, FreeBSD
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
firefox --app application.ini
----

.Cygwin on Windows
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
cygstart firefox.exe --app application.ini
----

    
#if __EN__
== Usage
#elif __JP__
== 使いかた
#endif

#if __EN__
=== Launching terminal

==== If it is Installed as Add-on: 
    Pressing control key twice (ctrl + ctrl), it shows Commandline Launcher interface.
    For example, if you type "man man[Enter key]" to this launcher textbox, 
    window-like UI emerges into browser chrome window and display manpage.  

==== If it is Installed as Vimperator/Muttator plugin: 
    You can launch tanasinn as same as Add-on version, by pressing control key twice (ctrl + ctrl).
    For displaying launcher interface from commandline, type as follows:

----
:tanasinnlaunch
----

    Or, if you would like to launch terminal screen in direct, type as below:

----
:tanasinncommand <command line>
----

#elif __JP__
=== 端末の起動
==== 拡張としてインストールした場合
    Controlキーの2度押し (ctrl + ctrl) でコマンドラインランチャーインターフェースが出現します。
    そこで例えば、"man man[Enterキー]" とタイプしてみてください。
    ウィンドウのようなUIがブラウザウィンドウ内に現れ、manページが表示されると思います。

==== Vimperator/Muttatorのプラグインとしてインストールした場合: 
    アドオン版と同様、Controlキーの2度押し (ctrl + ctrl) でtanasinnが起動します。
    Vimperator/Muttatorのコマンドライン上から起動したい場合は、以下のようにタイプしてください。

----
:tanasinnlaunch
----

    もしターミナルスクリーンをVimperator/Muttatorから直接起動させたければ、以下のようにします:

----
:tanasinncommand <コマンド>
----

#endif

#if __EN__
=== Basic operating procedure 

    It is similer to well-known terminal emurators, like xterm. 
    but including specific fetures as follows.
#elif __JP__
=== 基本的な操作方法

    xtermのような端末エミュレータを使ったことがあれば大体いけると思いますが、
    以下のような特筆すべき仕様もいくつかあります。
#endif

#if __EN__
.shift + shift (shift key twice)

    switch input focus between terminal and commandline textbox.
#elif __JP__
.shift + shift (shiftキーの2度押し)

    ターミナルとコマンドラインテキストボックスの間でフォーカスを切り替えます。
#endif

#if __EN__
.shift + mouse drag

    move window.
#elif __JP__
.shift + マウスドラッグ

    ウィンドウの移動。
#endif

#if __EN__
.alt + mouse select

    select rectangle region. (like Terminal.app)
#elif __JP__
.alt + マウスで範囲選択

    矩形選択。 (Terminal.appの真似)
#endif

#if __EN__
=== Using commandline interface
    
    The specification of commands is not frozen. Comming soon...
    Now the implementation of this part is witten by rush job, commandline parser 
    is not proper one.

#elif __JP__
=== コマンドラインインターフェースを使う
    
    …仕様が全然固まってませんのでまだ書けません。
    この部分は作りはじめて日が浅いので、これから色々考えます。
#endif


#if __EN__

== Tips

=== To enable/disable plugins.
Type it in the command-line input field.

----
enable <plugin id>
----

----
disable <plugin id>
----

=== To save/load session's settings.
To persist the state of current session (font, color, screen size, ...etc), Type it in the command-line input field.

----
saveprofile
----

Then current session's configuration settings will be persisted to 
"$HOME/.tanasinn/profile/default.js".
If you would like to save it as other file name, type as follows:

----
saveprofile <profile name>
----

Therefore the settings will be persisted to "$HOME/.tanasinn/profile/<profile name>.js".

And to load it again, type as follows:

----
loadprofile <profile name>
----


=== To detach from current session.
Type it in the command-line input field.

----
detach
----

The session will be suspended. and you can reconnect to it from launcher interface.

=== To kill current session.
Type it in the command-line input field.

----
kill
----

=== How to Hook "<C-i>"(edit input field by external editor) and "gF"(view source in external viewer) mappings if tanasinn is Installed as Vimperator/Muttator plugin. 

If you would like to edit input field by external editor on tanasinn,
add following command to your vimperatorrc/muttatorrc. 

----
let g:tanasinneditorcommand="vim %"
----

It requires "vim" command on your system. 
'%' is to be replaced with a temporary file path.

To view HTML source on tanasinn, add fllowing command. 

----
let g:tanasinnviewsourcecommand="curl '%' | tidy | vim -"
----

'%' is to be replaced with an escaped URL string.
This example requires "vim", "tidy", and "curl" command on your system. 

#elif __JP__

== Tips


=== モジュールの有効・無効を切り替えるには
コマンドラインから以下のようにタイプしてみてください。

----
enable <プラグインID>
----

----
disable <プラグインID>
----

=== セッションの設定を永続化・ロードするには
コマンドラインから以下のようにタイプしてみてください。

----
saveprofile
----

こうすれば現在のセッションの設定が "$HOME/.tanasinn/persist/default.js" へ書き出されるでしょう。
もし別の名前で書き出したければ:

----
saveprofile <プロファイル名>
----

これで設定が"$HOME/.tanasinn/profile/<プロファイル名>.js"に書き出されます。

この設定を再び読み込むには以下のようにします:

----
loadprofile <プロファイル名>
----


=== 現在のセッションからデタッチするには
コマンドラインから以下のようにタイプしてみてください。

----
detach
----

セッションはサスペンドされます。ランチャーインターフェースからこのセッションに再接続することができます。

=== 現在のセッションを終了するには
コマンドラインから以下のようにタイプしてみてください。

----
kill
----

=== Vimperator/Muttatorプラグインとしてインストールしたとき、 "<C-i>"(インプットフィールドを外部エディタで編集) と "gF"(HTMLソースを外部ビューワで閲覧) マッピングをフックするには

インプトッフィールドをtanasinn上の外部エディタで編集したければ、vimperatorrc/muttatorrcに
以下のコマンドを追加してください。

----
let g:tanasinneditorcommand="vim %"
----

この例ではvimコマンドがシステムにインストールされている必要があります。
「%」の部分はテンポラリファイルのパスに置換されます。

HTMLソースをtanasinnで見るには、以下のコマンドを追加します。 

----
let g:tanasinnviewsourcecommand="curl '%' | tidy | vim -"
----

「%」はエスケープ済みのURL文字列に置換されます。
この例ではvimとtidyとcurlコマンドのインストールが必要になります。

#endif


#if __EN__
== Known issues

 - In Windows + Cygwin enviroinment, booting and emuration performance is so damn slow!!
 - At SandS(Space and Shihft) keyboard enviroinment, shift + shift 
   (shift key twice) key sequence are detected by space + space, unfortunately!!
   I think something other way for it should be provided.


#elif __JP__
== 既知の問題

 - Windows + Cygwin 環境では起動やエミュレーションが糞遅いです。
 - キーボードがSandS(Space and Shihft)環境だとspace + space で shift + shift を検出してしまいます。代替手段を用意しなければいけません。

#endif

#if __EN__
== Bug reports and patches

Patches and bug reports are are encouraged. > saitoha <user@zuse.jp>,
or toweet me (http:/#/twitter.com/feel_tanasinn[English] / http:/#/twitter.com/kefir_[Japanese]).
#elif __JP__
== バグレポート・パッチ

.バグレポート・パッチ超歓迎。 
saitoha <user@zuse.jp> 
twitter: http:/#/twitter.com/kefir_[日本語] / http:/#/twitter.com/feel_tanasinn[英語] 

#endif

