#include "define.h"

= tanasinn terminal emulator 

#if __EN__
link:./usermanual-ja.html[日本語/Japanese]
#elif __JP__
link:./usermanual.html[English/英語]
#endif

#if __EN__

== Overview

    Here is a terminal emulator that runs on Firefox/Thunderbird/SeaMonkey.
    It Supports Windows(XP/Vista/7) + Cygwin / Mac / Linux / FreeBSD. 
    It enables you to access flexible, powerful functionality 
    provided by operating systems, such as commandline shells, or curses-based 
    applications.

#elif __JP__

== 概要

    "tanasinn terminal emulator" は Firefox/Thunderbird/SeaMonkey上で動作し、
    「あらゆる挙動をカスタマイズ可能に」をモットーに製作された最重量級の端末エミュレータです。
    Windows(XP/Vista/7) + Cygwin / Mac / Linux / FreeBSD 環境で動作します。
    ほぼJavascriptによる実装(2%のPython)です。
    コマンドラインシェルやターミナルエディタが提供するCUI/TUIを用いて、オペレーティングシステムの
    機能群にブラウザからアクセスすることができます。

#endif

#if __EN__
== News

2012/02/04
Now version 0.1.5.4 available.

#elif __JP__
== News 

.2012/03/25
メモリーリークを修正したものがカレントにはいってます。
いままで1セッションにつき10Mくらい、大量にリークしてました。

デフォルトのマッピング設定の一部(<PinchOpen>など)を廃止しています。
.tanasinn/tanasinnrcにてユーザーの好みでマップするようにしたほうが良いと判断しました。



.2012/02/13 リリースポリシー変更

  チュートリアル書きながらソースを変更しまくってるので、
  しばらくスナップショット版しか提供しません。

.2012/02/04 バージョン0.1.5.3

  重要：0.1.5.0 / 0.1.5.1はビルド時のバグのため「動きません」。
          0.1.5.2は一部のプラットフォームで動きません。  
          いろいろ試行錯誤しちゃった人はすみません。

  Python2.x系のパスやCygwinのルートディレクトリなどを探しまわり、環境情報を推定しようとします。

  動かなかった場合は %USERPROFILE%¥.tanasinn.js (Windows)、または~/.tanasinn.js(それ以外のOS) に、
  このように書いてみてください。

----
process.cygwin_root = "C:\\cygwin";
process.bin_path = "/bin:/usr/bin:/usr/local/bin:/opt/local/bin";
process.python_path = "/usr/bin/python"
----

    それでもだめな環境もあるかもしれません。
    こちらからはtwitter用ハッシュタグ #tanasinn / #tanasinnが動かない あたりで探してみます。

    拡張フォルダ内のディレクトリ名が歴史的理由により意味不明になっていたので、かなり変えました。

#endif

#if __EN__

=== Download/License
This software is distributed under http:/#/www.mozilla.org/MPL/1.1/[Mozilla Public License 1.1 (MPL1.1)] .

- Developing version (PACKAGE_VERSION): http:/#/zuse.jp/tanasinn/downloads/versions/PACKAGE_VERSION/TANASINN_XPI_ID.xpi[Download]
- Unstable, Snapshot version (it may so bugful!): http:/#/zuse.jp/tanasinn/tanasinn-current.xpi[Download]

#elif __JP__

=== ダウンロード/ライセンス
http:/#/www.mozilla-japan.org/MPL/MPL-1.1J.html[Mozilla Public License 1.1 (MPL1.1)] で配布しています。 
    
    チュートリアルを書き終わるまで、スナップショット版しか提供しません。
    現在開発者がオープンソースにおけるソースコード共有モデルとワークフロー管理について必死に勉強中です。
    そこそこgitが使えるようになってきたら、安定したリリースビルドを提供していきたいと考えています。

- スナップショット版(PACKAGE_VERSION): http:/#/zuse.jp/tanasinn/tanasinn-current.xpi[ダウンロード]
- 開発版 (PACKAGE_VERSION): http:/#/zuse.jp/tanasinn/downloads/versions/PACKAGE_VERSION/TANASINN_XPI_ID.xpi[ダウンロード].
- 過去のバージョン: http:/#/zuse.jp/tanasinn/downloads/versions/

#endif

- git repo: TANASINN_GIT_REPOSITORY
- gitweb: http:/#/zuse.jp/git/?p=tanasinn.git

#if __EN__
== Highlighting features
    - Full Gecko based user interface (HTML Canvas + XUL), it is flexible and easy to customize.
    - Multi-platform, now supports Mac / FreeBSD / Linux (Tested in Ubuntu) / 
      Windows(XP/Vista/7) + http:/#/www.cygwin.com[Cygwin] (requires posix python).
    - Supports plugin architecture. it supports Plug-and-Play installing & uninstalling.
    - Retaining TTY session during closing/restarting browser.
      you can reconnect suspended terminal session.
    - Including debugger. You can run it in step-execution-mode or trace-mode 
      and observe terminal I/O sequence in real-time.
    - Supports basic features, scroll-back, alternate screen, visual bell, audio bell ...etc.
    - IME is supported.
    - Supports east asian double width characters. 
      but it is not render bidi languages correctly.
    - Localization supported. It is using gettext-style method. you can edit localize resource on UI.
    - You can selects variable character encoding supported by Gecko.
    - Supports transparent window. it is useful when www-browsing while working at terminal.
    - xterm-like mouse emulation. supports smoothing pixel scroll.
    - Text selection / Rectangle text selection.
    - Supports copy / paste in Drag & Drop or keyboard shortcut.
    - Supports move / re-size through dragging operation.
    - Supports 256 terminal colors, you can assign 32bit colors for them.
    - Vimperator / Keysnail like commandline interface.
    - It can be installed as a plugin for Vimperator/Muttator. It hooks "<C-i>" and "gF" mappings if you want.
    - Running as standalone XUL application if you want. (but now buggy!)
#elif __JP__
== 特色
    - Geckoベースのユーザーインターフェース (HTML Canvas + XUL)。柔軟でカスタマイズが容易です。
    - マルチプラットフォーム。現在サポートされるのは、Mac / FreeBSD / Linux(というかUbuntu) / 
      Windows(XP/Vista/7) + http:/#/www.cygwin.com[Cygwin]環境 (POSIX版Pythonが必要)
    - プラグインアーキテクチャ。プラグアンドプレイでのインストール・アンインストールが可能。
    - ブラウザを再起動したり閉じたりしている間、ターミナルセッションを保持します。
      サスペンドしたセッションに後から再接続できます。 
    - デバッガ内臓。ステップ実行やトレースができます。
      ターミナルとアプリケーションがやり取りするI/Oシーケンスをリアルタイムで観察できます。
    - スクロールバック、代替スクリーン、ビジュアルベル、オーディオベルなど基本的な機能はサポートしています。
    - IMEが使えます。
    - East Asian Width(ひらがななどの文字幅を考慮したレンダリング)に一応対応しています。 
      B集合以降のCJK統合拡張漢字等、サロゲートペアで表現される文字にも対応しています。
      異体字セレクタ、インド系諸語等で頻出する合字やアラビア系文字の置換などの複雑なグリフ処理は、
      現在主にパフォーマンス上の理由により実装されませんが、 別途プラグインで対応することも可能です。
      bidiには完全に対応できていないと思います。
    - 地域化のサポート。gettextのようなスタイルを採用しています。
      ローカライズリソースをUI上から編集することができます。
    - Geckoがサポートする様々なエンコーディングを指定できます。
    - ウィンドウの透明化をサポート。これはブラウジングしながらターミナルで作業したい時に便利です。
    - xtermのようなマウスエミュレーションができます。ホイールスクロールにも対応。
    - テキストの選択や矩形選択ができます。
    - ドラッグアンドドロップやキーボードショートカットによる選択テキストのコピー・ペーストが可能です。
    - ドラッグによる移動・リサイズができます。
    - 256色表示対応。32bitカラーをパレットに割り当てることができます。
    - VimperatorやKeysnailのようなコマンドラインインターフェース。
    - Vimperator/Muttator のプラグインとして導入することができます。必要なら"<C-i>"や"gF"マッピングをフックすることができます。
    - 一部のプラットフォームでトラックパッドジェスチャー対応。
      ピンチオープン・クローズ、スワイプを別のキーイベントにマップすることが可能。
    - スタンドアロンのXULアプリケーションとして動作させることも頑張れば可能。
#endif

#if __EN__
#elif __JP__
#endif


#if __EN__
== Screen-shots
#elif __JP__
== スクリーンショット
#endif

#if __EN__
.Running "http:/#/miku.acm.uiuc.edu[Nyan Cat]".
#elif __JP__
."http:/#/miku.acm.uiuc.edu[Nyan Cat]"を走らせたところ。
#endif
image::images/nyan.png[width=780]

#if __EN__
.Running "http:/#/w3m.sourceforge.net/index.en.html[BB]", an ascii art demo program.
#elif __JP__
."http:/#/w3m.sourceforge.net/index.en.html[BB]"(アスキーアートのデモプログラム)を走らせたところ。
#endif
image::images/bb2.png[width=780]

#if __EN__
.Displaying color chart with http:/#/code.google.com/p/myminios/source/browse/trunk/colortable16.sh?r=10[colortable.sh] and http:/#/code.google.com/p/joeldotfiles/source/browse/trunk/256colors2.pl[256color2.pl].
#elif __JP__
.http:/#/code.google.com/p/myminios/source/browse/trunk/colortable16.sh?r=10[colortable.sh] and http:/#/code.google.com/p/joeldotfiles/source/browse/trunk/256colors2.pl[256color2.pl]でカラーチャートを表示させたところ。
#endif
image::images/color2.png[width=780]

#if __EN__
.Typing Japanese with IME (here is http:/#/aquaskk.sourceforge.jp/[AquaSKK]).
#elif __JP__
.IMEで日本語を打ってみたところ (http:/#/aquaskk.sourceforge.jp/[AquaSKK]使用)。
#endif
image::images/ime2.png[width=780]

#if __EN__
.Scroll bar interface emerges only when it is needed (like OSX Lion).
#elif __JP__
.スクロールバーインターフェースは必要なときにあらわれます(OSX Lionのように)。
#endif
image::images/scroll2.png[width=780]

#if __EN__
.Overlay indicator dislays various messages. it emerges when font size / window size / title bar message is changed.
#elif __JP__
.オーバーレイインジケータがフォントサイズ、ウィンドウサイズ、タイトルバーメッセージが変更されたときなどに表示されます。
#endif
image::images/overlay2.png[width=780]

#if __EN__
.Commandline interface inspired by http:/#/vimperator.org/vimperator[Vimperator] / https:/#/github.com/mooz/keysnail/wiki/[Keysnail] (here is fgcolor command).
#elif __JP__
.http:/#/vimperator.org/vimperator[Vimperator] や https:/#/github.com/mooz/keysnail/wiki/[Keysnail] にインスパイアされたコマンドラインインターフェース。
#endif
image::images/completion2.png[width=780]

#if __EN__
.Choosing font-family.
#elif __JP__
.フォントファミリを選択しています。
#endif
image::images/fontfamily2.png[width=780]

#if __EN__
.Selecting font-size.
#elif __JP__
.フォントサイズを選択しています。
#endif
image::images/fontsize2.png[width=780]

#if __EN__
.Launcher interface inspired by http:/#/www.blacktree.com/[QuckSilver] / https:/#/addons.mozilla.org/ja/firefox/addon/mozilla-labs-ubiquity/[Ubiquity].
#elif __JP__
.http:/#/www.blacktree.com/[QuckSilver] や https:/#/addons.mozilla.org/ja/firefox/addon/mozilla-labs-ubiquity/[Ubiquity] にインスパイアされたランチャーインターフェース。
#endif
image::images/launcher2.png[width=780]

#if __EN__
.Reconnecting a detached session. It is all OK if your browser will crash or restart unexpectedly.
#elif __JP__
.デタッチ済みのセッションに再接続しているところ。ブラウザがクラッシュしたり再起動しても安心です。
#endif
image::images/session2.png[width=780]

#if __EN__
.running "http:/#/www.tkl.iis.u-tokyo.ac.jp/~toyoda/index_e.html[sl]" (a joke software).
#elif __JP__
."http:/#/www.tkl.iis.u-tokyo.ac.jp/~toyoda/index_e.html[sl]" (ジョークウェア)を走らせたところ。
#endif
image::images/sl2.png[width=780]

#if __EN__
.Self-Debugging and tracing terminal I/O sequence in real-time.
#elif __JP__
.セルフデバッギング。ターミナルI/Oシーケンスをリアルタイムにトレースしています。
#endif
image::images/debug2.png[width=780]

#if __EN__
.Providing cool pop-up menu. it is cooperating with patched http:/#/www.vim.org[Vim].
#elif __JP__
.ポップアップメニューを表示しています。http:/#/www.vim.org[Vim]の方をちょっと改造しました。
#endif
image::images/vim.png[width=780]

#if __EN__
.Browser-in-browser. running http:/#/w3m.sourceforge.net/index.en.html[w3m] (applied private patch) with inline images. How crazy!!!
#elif __JP__
.ブラウザの中でブラウザ。プライベートパッチを当てたhttp:/#/w3m.sourceforge.net/index.en.html[w3m]でインラインイメージを表示させました。ここまでくるとちょっと意味不明ですね。
#endif
image::images/w3m2.png[width=780]

#if __EN__
.Mailer-in-mailer. running http:/#/www.gohome.org/wl/index.html[Wonderlust] on emacs on Thunderbird.
#elif __JP__
.メーラーの中でメーラー。http:/#/www.gohome.org/wl/index.html[Wonderlust]をemacs上で動かしているものをThunderbird上で動かしています。
#endif
image::images/wl3.png[width=780]

#if __EN__
.Meta-developing tanasinn with tanasinn at out of jail. it runs as a standalone XUL application.
#elif __JP__
.tanasinnをtanasinnでメタ開発中。これはスタンドアロンXULアプリケーションとして動作させているところです。
#endif
image::images/xulapp.png[width=780]

#if __EN__
.https://github.com/pda/roflbalt[roflbalt]. A game written in Ruby.
#elif __JP__
.https://github.com/pda/roflbalt[roflbalt]。Rubyで書かれたゲームです。
#endif
image::images/roflbalt.png[width=780]

#if __EN__
.zsh's "correct".
#elif __JP__
.zshのcorrect機能にプライベートシーケンスを仕込みました。シーケンスハンドラの応用例です。
#endif
image::images/zsh.png[width=780]

#if __EN__

== Features in future...

    * Improving emulation. now emulation engine is running with xterm compatible mode. 
      but it ought to read terminfo entries.
    * Supporting color scheme. import/export color palette contains 16 or 256 colors.
    * Supporting skins. you can make it otakunized.
    * Making it to be more collaborative with curses-based applications.
      Accessing to Gecko and do something like opening pop-up windows, playing movies, 
      OAuth authorization, ...etc., from terminal applications. 
      We're dreaming of enjoying youtube or twitter with no plugins, from terminal, don't you?
    * Documents for plug-in developers are comming soon... - -;)

#elif __JP__
== 将来的にサポートされる仕様
    
    * エミュレーションの強化。今はとりあえずxterm系コンパチブルなエミュレーションで作ってますが、
      本来はterminfoエントリを見るべきでしょう。
    * カラースキーマのサポート。16色or256色のパレットをインポート/エクスポートできるように。
    * スキンのサポート。痛端末化が可能に。
    * cursesベースのアプリーションとの連携強化。
      端末アプリケーションからGeckoにアクセスしてポップアップとか動画表示とかOAuthとかやるための仕様の策定。
      特別なプラグインを書かずとも端末からyoutubeを見たりtwitterやったりできるようになります。
    * プラグイン開発用ドキュメント。

#endif


#if __EN__
== Requirements
    - Firefox 4.02pre+ / Thunderbird 7.0a1+ / SeaMonkey 2.1+.
    - Python for POSIX (2.5+, Mac, FreeBSD, Linux, or cygwin version)
      Python for Win32, ActivePython, etc... are not well.
      because this software depends on many posix functions 
      'os.fork', 'os.openpty' ..etc.
    - Posix environment. 
      If you are running Windows, you need to install cygwin at C:\cygwin.
#elif __JP__
== 動作要件
    - Firefox 4.02pre+ / Thunderbird 7.0a1+ / SeaMonkey 2.1+.
    - POSIX用にビルドされたPython (2.5+, Mac、FreeBSD、Linux、 または cygwin用のもの)。
      Python for Win32 や ActivePython 等はforkや仮想端末をサポートしないと思うのでダメしょう。
    - POSIX環境。 
      もしWindowsをお使いでしたら、C:\cygwinにCygwinをインストールしてください。
#endif

#if __EN__
== Installing
#elif __JP__
== インストール
#endif

#if __EN__

=== Building Firefox/Thunderbird/SeaMonkey extension:
.Mac, FreeBSD, Linux, Cygwin
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
make
----
    If build process is succeeded, target XPI file 
    TANASINN_XPI_ID is to be generated. enjoy it!
#elif __JP__

=== Firefox/Thunderbird/SeaMonkey拡張としてビルドする:
.Mac, FreeBSD, Linux, Cygwin
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
make
----
    ビルドが成功すると、TANASINN_XPI_IDというXPIファイルが生成されます。
    これをインストールしてください。
#endif
    
#if __EN__
=== Installing as Vimperator/Muttator plugin:

    Make some links into Vimperator/Muttator runtime directory as following:

.Mac, FreeBSD, Linux
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
ln -s $PWD $RUNTIME/tanasinn
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/ 
----
        
.Windows Vista/7 + Cygwin
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
$(cygpath $COMSPEC) /c mklink /D "$(cygpath -w "$RUNTIME/tanasinn")" "$(cygpath -w "$PWD")";
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/
----

.Windows XP + Cygwin
To make Windows native symbolic link, you may need to install http:/#/www.microsoft.com/download/en/details.aspx?DisplayLang=en%2cen&id=17657[Windows Server 2003 Resource Kit Tools].

----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
$(cygpath $COMSPEC) /c linkd.exe "$(cygpath -w "$RUNTIME/tanasinn")" "$(cygpath -w "$PWD")";
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/
----

    $RUNTIME is Vimperator/Muttator runtime directory such as '$HOME/.{vimperator,muttator}'.
#elif __JP__
=== Vimperator/Muttatorプラグインとしてインストール:

    Vimperator/Muttatorのランタイムディレクトリ以下にリンクを作成します。

.Mac, FreeBSD, Linux
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
ln -s $PWD $RUNTIME/tanasinn
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/ 
----
        
.Windows Vista/7 + Cygwin
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
$(cygpath $COMSPEC) /c mklink /D "$(cygpath -w "$RUNTIME/tanasinn")" "$(cygpath -w "$PWD")";
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/
----

.Windows XP + Cygwin
Windowsネイティブなシンボリックリンクを作成するために、http:/#/www.microsoft.com/download/en/details.aspx?DisplayLang=en%2cen&id=17657[Windows Server 2003 Resource Kit Tools] をインストールする必要があるかもしれません。

----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
$(cygpath $COMSPEC) /c linkd.exe "$(cygpath -w "$RUNTIME/tanasinn")" "$(cygpath -w "$PWD")";
ln $PWD/modules/tanasinn-vimp.js $RUNTIME/plugin/
----

    $RUNTIMEは'$HOME/.{vimperator,muttator}'のようなVimperator/Muttatorのランタイムディレクトリです。
#endif

#if __EN__
#elif __JP__
=== KeySnail経由でインストール:

.keysnail.jsに以下のように記述します。


.keysnail.js
----

............

void function install_tanasinn() {

    var file = "file:///…………/tanasinn/modules/common/process.js"; // <-- process.jsのパス(URL表現)

    var contractID = "@zuse.jp/tanasinn/process;1";
    var process_class = Components.classes[contractID]
    if (!process_class) {
        Components.classes["@mozilla.org/moz/jssubscript-loader;1"]
            .getService(Components.interfaces.mozIJSSubScriptLoader)
            .loadSubScript(file);
        process_class = Components.classes[contractID]
    }
    var process = process_class
        .getService(Components.interfaces.nsISupports)
        .wrappedJSObject;

    shell.add(["tanasinnlaunch","tla[unch]"], 
              "Show tanasinn's Launcher.", 
              function () { 
                  process.getDesktopFromWindow(window)
                      .post("command/show-launcher");
              }, {
                argcount: "0",
                bang: true
              });
    
    shell.add(["tanasinnstart","tst[art]"], 
              "Run a command on tanasinn.", 
              function (args, extra) { 
                  process.getDesktopFromWindow(window)
                      .post("command/start-session", extra.left);
              }, {
                argcount: "?",
                bang: true
              });
} ();

............

----

#endif

#if 0
#if __EN__
=== Running as XUL Application (advanced, unstable, it does not works well...):
#elif __JP__
=== XULアプリケーションとして起動 (不安定、うまく動かないかもしれません):
#endif
    
.MacOSX
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
open /Applications/Firefox.app --args --app $(PWD)/application.ini
----

.Linux, FreeBSD
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
firefox --app application.ini
----

.Cygwin on Windows
----
git clone TANASINN_GIT_REPOSITORY
cd tanasinn
./configure
cygstart firefox.exe --app application.ini
----
#endif
    
#if __EN__
== Usage
#elif __JP__
== 使いかた
#endif

#if __EN__
=== Launching terminal
#elif __JP__
=== 端末の起動
#endif

image::images/launcher.png[width=480]

#if __EN__

==== If it is Installed as Add-on: 
    Pressing control key twice (ctrl + ctrl), it shows Commandline Launcher interface.
    For example, if you type "man man[Enter key]" to this launcher textbox, 
    window-like UI emerges into browser chrome window and display manpage.  

==== If it is Installed as Vimperator/Muttator plugin: 
    You can launch tanasinn as same as Add-on version, by pressing control key twice (ctrl + ctrl).
    For displaying launcher interface from commandline, type as follows:

----
:tanasinnlaunch
----

    Or, if you would like to launch terminal screen in direct, type as below:

----
:tanasinnstart <command line>
----

#elif __JP__

==== 拡張としてインストールした場合
    Controlキーの2度押し (ctrl + ctrl) でコマンドラインランチャーインターフェースが出現します。
    そこで例えば、"man man[Enterキー]" とタイプしてみてください。
    ウィンドウのようなUIがブラウザウィンドウ内に現れ、manページが表示されると思います。

==== Vimperator/Muttatorのプラグインとしてインストールした場合: 
    アドオン版と同様、Controlキーの2度押し (ctrl + ctrl) でtanasinnが起動します。
    Vimperator/Muttatorのコマンドライン上から起動したい場合は、以下のようにタイプしてください。

----
:tanasinnlaunch
----

    もしターミナルスクリーンをVimperator/Muttatorから直接起動させたければ、以下のようにします:

----
:tanasinnstart <コマンド>
----

example:
----
:tanasinnstart emacs -nw
----

    tanasinnにコマンドを送信したいときは、以下のようにします:

----
:tanasinncommand <コマンド>
----

example:
----
:tanasinncommand overlayecho Hello, World!
----

    tanasinnにキー入力を送信したいときは、以下のようにします:

----
:tanasinnsendkeys <キーシーケンス式>
----

example:
----
:tanasinnsendkeys <nmode><C-z>top<CR>
----

#endif


#if __EN__
=== Basic operating procedure 

    It is similar to well-known terminal emulators, like xterm. 
    but including specific features as follows.
#elif __JP__
=== 基本的な操作方法

    xtermのような端末エミュレータを使ったことがあれば大体いけると思いますが、
    以下のような特筆すべき仕様もいくつかあります。
#endif

#if __EN__
.shift + shift (shift key twice)

    switch input focus between terminal and commandline textbox.
#elif __JP__
.shift + shift (shiftキーの2度押し)

    ターミナルとコマンドラインテキストボックスの間でフォーカスを切り替えます。
#endif

#if __EN__
.shift + mouse drag

    move window.
#elif __JP__
.shift + マウスドラッグ

    ウィンドウの移動。
#endif

#if __EN__
.alt + mouse select

    select rectangle region. (like Terminal.app)
#elif __JP__
.alt + マウスで範囲選択

    矩形選択。 (Terminal.appの真似)
#endif

#if __EN__
.pinch open/close

    increase/decrease font size. (like iTerm2)
#elif __JP__
.ピンチオープン／クローズ

    フォントサイズの拡大・縮小。 (iTerm2の真似)
#endif


#if __EN__
=== Using commandline interface
#elif __JP__
=== コマンドラインインターフェースを使う
#endif
    
image::images/commandline.png[width=480]

#if __EN__

    The specification of commands is not frozen. Comming soon...
    Now the implementation of this part is written by rush job, commandline parser 
    is not proper one.

#elif __JP__
    
    [bold]*shift+shiftでコマンドラインにカーソルが移動します*。
    これだけおぼえておけばとりあえず補完でなんとかなると思います。    

==== 文字コード設定

===== decoder

アプリケーションの出力を解釈するための文字コード体系を設定します。
----
decoder [キャラクタセット・符号化方式名]
----

===== encoder

アプリケーションへの入力操作を行うときの文字コード体系を設定します。
----
encoder [キャラクタセット・符号化方式名]
----

使用可能な文字コード名はGeckoに依存します。補完で確認してください。

image::images/decoder.png[width=780]

==== 地域化

===== localize
メッセージやUI要素のローカライズを行います。

----
localize [ロケールID] "[メッセージID]" "[翻訳済み文字列]"
----

[ロケールID](LCID)は日本語環境をお使いならたいていja-JPだと思います。

image::images/localize.png[width=780]

[メッセージID]はgettextのように英語表現になっています。
この設定は通常の永続化機構とは別の仕組みで保存されますので、
saveprofileのような保存操作はとくに必要ありません。

==== 外観の設定

===== fgcolor

前景色を設定します。
----
fgcolor [色番号] [CSS color]
----
[色番号]に対応する前景色パレットに、[CSS color]で表現される色が設定・適用されます。

===== bgcolor

背景色を設定します。
----
bgcolor [色番号] [CSS color]
----
[色番号]に対応する背景色パレットに、[CSS color]で表現される色が設定・適用されます。

image::images/bgcolor.png[width=780]

色番号は0から255までの整数です。
通常の16色カラー端末では0から15までが使用されます。

===== fontfamily

フォントファミリを設定します。
----
fontfamily [フォント名]
----
ターミナルのフォントファミリが[フォント名]に設定・適用されます。

image::images/fontfamily3.png[width=780]


===== fontsize

フォントサイズを設定します。
----
fontsize [フォントサイズ]
----
ターミナルのフォントサイズが[フォントサイズ]pxに設定・適用されます。
単位がpixelであることに注意してください。

image::images/fontsize3.png[width=780]

===== increase

フォントサイズを1px増加させます。
----
increase
----

数字のプレフィクスをつけて、以下のようにすると、フォントサイズが5px増加します。
----
5increase
----


===== decrease

フォントサイズを1px減少させます。
----
decrease
----

数字のプレフィクスをつけて、以下のようにすると、フォントサイズが5px減少します。
----
5decrease
----

==== ウィンドウ操作

===== up / down / left / right

ウィンドウを上下左右に移動させます。移動量はデフォルトで60pxです。
この値は、設定値moveshortcut.stepで変更できます。

数字のプレフィクスをつけて、たとえば以下のようにすると、5 x 60px = 300px 右に移動します。

----
5right
----

===== wider / narrower / shorter / taller

ウィンドウサイズを調整します。

数字のプレフィクスをつけて、たとえば以下のようにすると、スクリーンが5カラム拡大します。

----
5wider
----

==== blur (new!)

ウィンドウからフォーカスをはずします。

----
blur
----

==== 編集系操作

===== copy

選択されたテキストをクリップボードへコピーします。

----
copy
----

===== paste

クリップボード内のテキストを現在のエンコーダーで符号化し、端末に送信します。

----
paste
----

    順次解説予定

==== マッピング管理

==== nmap
==== nnoremap
==== nunmap
==== cmap (new!)
==== cnoremap (new!)
==== cunmap (new!)

==== コンポーネント管理
===== lscomponent

===== disable

プラグインを無効化します。

----
disable [プラグインID]
----

===== enable

プラグインを有効化します。

----
enable [プラグインID]
----

==== 履歴管理
===== clearhistory

コマンドラインヒストリをクリアします。

----
clearhistory
----

==== セッション操作
===== kill/quit

現在のセッションを終了し、ウィンドウを閉じます。

----
kill
----

または

----
kill
----

===== detach

現在のセッションをサスペンドし、ウィンドウを閉じます。

----
detach
----

==== プロファイル操作

===== loadprofile

永続化されたセッションプロファイルをロードします。
以下のようにすると"default"という名前のセッションプロファイルが "$HOME/.tanasinn/persist/default.js" から読み込まれます。

----
loadprofile
----

もし別のプロファイルを読み込みたければ:

----
saveprofile [プロファイル名]
----

としてください。
[プロファイル名]は英数字、ドット(.)、アンダースコア(_)、ハイフン(-)が使用可能です。

===== saveprofile

現在のセッション設定を永続化します。
以下のようにすると現在のセッションプロファイルが"default"という名前で "$HOME/.tanasinn/persist/default.js" へ書き出されます。

----
saveprofile
----

もし別の名前で書き出したければ:

----
saveprofile [プロファイル名]
----

としてください。
[プロファイル名]は英数字、ドット(.)、アンダースコア(_)、ハイフン(-)が使用可能です。

===== deleteprofile

永続化されたセッション設定を削除します。
以下のようにするとセッションプロファイル"default"が削除されます。

----
saveprofile
----

もし別のセッションプロファイルを削除したければ:

----
deleteprofile [プロファイル名]
----

としてください。
[プロファイル名]は英数字、ドット(.)、アンダースコア(_)、ハイフン(-)が使用可能です。

===== globalload
===== globalsave
===== globaldelete

==== パネル操作
===== openpanel

パネルを表示します。

----
openpanel
----

===== closepanel

パネルを隠します。

----
closepanel
----

==== デバッグ支援
===== console

コンソールパネルの表示状態をトグルします。

----
console
----

===== debugger

デバッガパネルの表示状態をトグルします。

----
debugger
----

==== 低レベル設定操作
===== set
===== setglobal

==== 低レベルメッセージング操作
===== publish

tupstartメッセージを発行します。

----
publish <メッセージ式> <Javascriptコード>
----

example
----
publish command/report-overlay-message "Hello, World!"
----

==== ユーティリティ
===== sendkeys (new!)

指定されたキーシーケンス式を解釈し、キーイベントとして実行します。

----
sendkeys [キーシーケンス式]
----

example:
----
sendkeys <nmode><C-z>echo Hello, World!<CR>fg<CR>
----

----
sendkeys <PinchOpen>
----

===== source (new!)

指定されたファイルをtanasinnコマンドバッチファイルとして読み込み、実行します。

----
source [ファイル・パス]
----

===== import (new!)

指定されたファイル名を~/.tanasinn/batchesディレクトリから検索し、コマンドバッチファイルとして実行します。

----
import [ファイル名]
----

===== execcgi (new!)

指定されたファイル名を~/.tanasinn/cgi-binディレクトリから検索し、実行した結果をコマンドバッチとして再解釈し、実行します。

----
execcgi [ファイル名]
----

引数で指定されるファイルは実行可能なものであればなんでもよいです。
たとえば、

[source,perl]
----
  #!/usr/bin/env perl

  print <<EOM
  overlayecho Hello, World!
  EOM

----

のようにすればperlで記述できますし、

[source,lisp]
----
  #!/usr/bin/emacs23 -nw --script

  (princ "enable console")

----

のようにすればelispが使えます。

===== vimperator (new!)

vimperatorにコマンドを送ります。

----
vimperator [command]
----

===== echo (new!)

ステータスラインにメッセージを表示します。

----
echo [メッセージ]
----

===== overlayecho (new!)

オーバーレイインジケータにメッセージを表示します。
----
overlayecho [メッセージ]
----

===== screenshot (new!)

現在のスクリーンを画像形式(png)で保存します。

----
screenshot [ファイル名]
----

たとえば

----
screenshot abc
----

とすると、{$HOME,%USERPROFILE%}/.tanasinn/screenshot/abc.pngにスクリーンショット画像が保存されます。

===== javascript

#endif

#if __EN__
=== User directories
#elif __JP__
=== ユーザーディレクトリ
#endif

-----------------------------------------------------------------

~/ or %USERPROFILE%/
   |
   +-- .tanasinn.js    <-------------------------------- (1)
   |
   +-- .tanasinn/      <-------------------------------- (2)
         |
         +-- tanasinnrc          <---------------------- (3)
         |
         +-- sessions.txt        <---------------------- (4)
         |
         +-- desktop_profile/    <---------------------- (5)
         |    
         +-- session_profile/    <---------------------- (6)
         |    
         +-- persist/            <---------------------- (7)
         |    
         +-- history/            <---------------------- (8)
         |    
         +-- batches/            <---------------------- (9)
         |    
         +-- cgi-bin/            <---------------------- (10)
         |    
         +-- screenshot/            <------------------- (11)
         |    
         +-- log/                <---------------------- (12)
         |
         +-- modules/            <---------------------- (13)
                |
                +-- process_components/          <------ (14)
                |
                +-- desktop_components/          <------ (15)
                |
                +-- session_components/          <------ (16)
                |
                +-- shared_components/           <------ (17)

-----------------------------------------------------------------

==== .tanasinn.js


#if __EN__

example)


#elif __JP__

起動時(Processオブジェクトが生成されるタイミング)に読み込まれ、実行されるJavascriptファイル。

#endif

.~/.tanasinn.js Or %USERPROFILE%¥.tanasinn.js
----

process.cygwin_root = "C:\\cygwin";
process.bin_path = "/bin:/usr/bin:/usr/local/bin:/opt/local/bin";
process.python_path = "/usr/bin/python"

----   

==== .tanasinn/

#if __EN__

#elif __JP__

ランタイムディレクトリ。

#endif

==== .tanasinn/tanasinnrc

#if __EN__

#elif __JP__

セッション生成時(Sessionオブジェクトが生成されるタイミング)に読み込まれ、1行づつ実行されるtanasinnコマンドファイル。

設定例：

..tanasinn/tanasinnrc
----

nmap <C-S-o> <cmode>detach<CR>
nmap <C-S-i> <2-shift>blur<CR>
nnoremap <C-S-z> <2-shift>
cmap <C-z> <2-shift>
cmap <C-s> <C-a><C-k>vimperator set!<CR> 
set renderer.normal_alpha=0.8
set renderer.font_size=20
set outerchrome.background_opacity=0.8
set outerchrome.background="-moz-radial-gradient(center, circle closest-side, #404040, #000)"


----

#endif

==== .tanasinn/sessions.txt

#if __EN__

#elif __JP__

デタッチ中のセッションを管理するためのファイル。

#endif

==== .tanasinn/desktop_profile/

#if __EN__

#elif __JP__

Desktopオブジェクトの設定が書き出されるディレクトリ。

#endif

==== .tanasinn/session_profile/ 

#if __EN__

#elif __JP__

Sessionオブジェクトの設定が書き出されるディレクトリ。

#endif

==== .tanasinn/persist/ 

#if __EN__

#elif __JP__

休眠中のセッションが永続化されて書き出されるディレクトリ。

#endif

==== .tanasinn/screenshot/ 

#if __EN__

#elif __JP__

スクリーンショット画像が書き出されるディレクトリ。

#endif

==== .tanasinn/log/ 

#if __EN__

#elif __JP__

ログが書き出されるディレクトリ。

#endif

==== .tanasinn/batches/ 

#if __EN__

#elif __JP__

importコマンドの引数として与えられたファイル名が検索されるディレクトリ。

#endif

==== .tanasinn/cgi-bin/ 

#if __EN__

#elif __JP__

execcgiコマンドの引数として与えられたファイル名が検索されるディレクトリ。

#endif

==== .tanasinn/modules/

#if __EN__

#elif __JP__

このディレクトリ内にユーザー拡張やユーザーデータが配置されます。 

#endif

==== .tanasinn/modules/process_components/

#if __EN__

#elif __JP__

プロセスバスに接続されるユーザー拡張が配置されるディレクトリ。 

#endif

==== .tanasinn/modules/desktop_components/

#if __EN__

#elif __JP__

デスクトップバスに接続されるユーザー拡張が配置されるディレクトリ。 

#endif

==== .tanasinn/modules/session_components/

#if __EN__

#elif __JP__

セッションバスに接続されるユーザー拡張が配置されるディレクトリ。 

#endif

==== .tanasinn/modules/shared_components/

#if __EN__

#elif __JP__

デスクトップバス・セッションバス両方に接続されるユーザー拡張が配置されるディレクトリ。 

#endif
 
#if __EN__

#elif __JP__

#endif

#if __EN__

== Tips

=== To enable/disable plugins.
Type it in the command-line input field.

----
enable <plugin id>
----

----
disable <plugin id>
----

=== To save/load session's settings.
To persist the state of current session (font, color, screen size, ...etc), Type it in the command-line input field.

----
saveprofile
----

Then current session's configuration settings will be persisted to 
"$HOME/.tanasinn/profile/default.js".
If you would like to save it as other file name, type as follows:

----
saveprofile <profile name>
----

Therefore the settings will be persisted to "$HOME/.tanasinn/profile/<profile name>.js".

And to load it again, type as follows:

----
loadprofile <profile name>
----


=== To detach from current session.
Type it in the command-line input field.

----
detach
----

The session will be suspended. and you can reconnect to it from launcher interface.

=== To kill current session.
Type it in the command-line input field.

----
kill
----

=== How to Hook "<C-i>"(edit input field by external editor) and "gF"(view source in external viewer) mappings if tanasinn is Installed as Vimperator/Muttator plugin. 

If you would like to edit input field by external editor on tanasinn,
add following command to your vimperatorrc/muttatorrc. 

----
let g:tanasinneditorcommand="vim %"
----

It requires "vim" command on your system. 
'%' is to be replaced with a temporary file path.

To view HTML source on tanasinn, add following command. 

----
let g:tanasinnviewsourcecommand="vim +e '%'"
----

'%' is to be replaced with an escaped URL string.
This example requires "vim" command on your system. 

#elif __JP__

== Tips


=== モジュールの有効・無効を切り替えるには
コマンドラインから以下のようにタイプしてみてください。

----
enable <プラグインID>
----

----
disable <プラグインID>
----

=== セッションの設定を永続化・ロードするには
コマンドラインから以下のようにタイプしてみてください。

----
saveprofile
----

こうすれば現在のセッションの設定が "$HOME/.tanasinn/persist/default.js" へ書き出されるでしょう。
もし別の名前で書き出したければ:

----
saveprofile <プロファイル名>
----

これで設定が"$HOME/.tanasinn/profile/<プロファイル名>.js"に書き出されます。

この設定を再び読み込むには以下のようにします:

----
loadprofile <プロファイル名>
----


=== 現在のセッションからデタッチするには
コマンドラインから以下のようにタイプしてみてください。

----
detach
----

セッションはサスペンドされます。ランチャーインターフェースからこのセッションに再接続することができます。

=== 現在のセッションを終了するには
コマンドラインから以下のようにタイプしてみてください。

----
kill
----

=== Vimperator/Muttatorプラグインとしてインストールしたとき、 "<C-i>"(インプットフィールドを外部エディタで編集) と "gF"(HTMLソースを外部ビューワで閲覧) マッピングをフックするには

インプトッフィールドをtanasinn上の外部エディタで編集したければ、vimperatorrc/muttatorrcに
以下のコマンドを追加してください。

----
let g:tanasinneditorcommand="vim %"
----

この例ではvimコマンドがシステムにインストールされている必要があります。
「%」の部分はテンポラリファイルのパスに置換されます。

HTMLソースをtanasinnで見るには、以下のコマンドを追加します。 

----
let g:tanasinnviewsourcecommand="vim +e '%'"
----

「%」はエスケープ済みのURL文字列に置換されます。
この例ではvimのインストールが必要になります。

=== Vimで現在のウィンドウにブラウザをオーバーレイで出したい
「Overlay Browser」という拡張をやっつけで書いてスナップショットビルドに入れておいたので、とりいそぎですが使用方法をご説明します。

以下のようなVim Scriptを書いてください。

----

function! s:open_gecko_window(src)
    let nr = winnr()
    let col = wincol()
    let line = winline()
    let width = winwidth(nr)
    let height = winheight(nr)
    call system('echo -en "\x1b]210;'.col.' '.line.' '.width.' '.height.' '.a:src.'\x07" > /dev/tty')
endfunction

function! s:close_gecko_window()
    call system('echo -en "\x1b]211;\x07" > /dev/tty')
endfunction

command -nargs=1 OpenMozilla call s:open_gecko_window(<f-args>)
command CloseMozilla call s:close_gecko_window()

----

このようにして使用します。
----
OpenMozilla http://google.com
----

image::images/browser.png[width=780]

Vim側では、ウィンドウを閉じるとき

----
CloseMozilla
----

を呼んで自分で状態管理していただく必要があります。
まだリサイズとかアップデートを実装していませんので使いづらいと思います。

=== ターミナルからtanasinnに対してコマンドを送りたい

以下のような文字列を、TTYデバイスに対して送ってください。
----

¥x1b]220;<コマンド>¥x07

----

tanasinnはこれをtanasinnコマンドとして解釈し、実行します。
コマンドはtanasinnが使用しているデコーダーの符号化方式と同じものを使用してエンコードされている必要があります。

たとえば、シェルから
----

echo -en "¥e]220;overlayecho Hello, World!¥a"

----

とタイプすると、tanasinnにはコマンド「overlayecho Hello, World!」が渡ります。

=== キーマッピングの設定

  tanasinnはVim scriptにファジーに似せた感じの書式でマッピング操作ができるコマンドを提供します。

- nmap [置換対象キーシーケンス式] [置換後のキーシーケンス式]

  ノーマルモードのマッピングを設定します。

- cmap [置換対象キーシーケンス式] [置換後のキーシーケンス式]

  コマンドラインモードのマッピングを設定します。

- 特殊なキー

* リーダーキー
** <Leader>        - 設定値nmap_manager.mapleaderおよびcmap_manager.mapleaderの値

* モードスイッチ仮想キー
** <nmode>         - ノーマルモード
** <cmode>         - コマンドラインモード

* モディファイヤ2度押し
** <2-Shift>       - Shift key twice.

* スワイプイベント仮想キー(一部のプラットフォームのみ)
** <SwipeLeft>     - 左にスワイプ
** <SwipeRight>    - 右にスワイプ
** <SwipeTop>      - 上にスワイプ
** <SwipeBottom>   - 下にスワイプ

* ピンチイベント仮想キー(一部のプラットフォームのみ)
   
** <PinchOpen>     - ピンチオープン
** <PinchClose>    - ピンチクローズ

.設定例 .tanasinn/tanasinnrc
----

 ##############################################################################
 #
 # Set Leader keys mappings
 #

 # set <Leader>
 set nmap_manager.mapleader="<C-s>"
 set cmap_manager.mapleader="<C-s>"

 ##############################################################################
 #
 # Gesture mappings
 #

 #for tmux
 nmap <SwipeLeft>    <C-b>p
 nmap <SwipeRight>   <C-b>n

 # zoom in/out
 nmap <PinchOpen>    <cmode>increase<CR>
 nmap <PinchClose>   <cmode>decrease<CR>

 ##############################################################################
 #
 # <Leader> mode
 #

 # zoom in/out
 nmap <Leader>, <cmode>decrease<CR><Leader>
 nmap <Leader>. <cmode>increase<CR><Leader>

 # move window
 nmap <Leader>h <cmode>left<CR><Leader>
 nmap <Leader>j <cmode>down<CR><Leader>
 nmap <Leader>k <cmode>up<CR><Leader>
 nmap <Leader>l <cmode>right<CR><Leader>

 # break <Leader> mode
 nmap <Leader><Esc> <nmode>

----

#endif


#if __EN__
== Known issues

 - In Windows + Cygwin environment, booting and emulation performance is so damn slow!!
 - At SandS(Space and Shift) keyboard environment, shift + shift 
   (shift key twice) key sequence are detected by space + space, unfortunately!!
   I think something other way for it should be provided.
 - It does'nt work when all NIC is disabled.
 - Now, it (developing version) requires too much memory.
 - It doesn't work in Python3 environment, requires Python2.x.

#elif __JP__
== 既知の問題

 - Windows + Cygwin 環境では起動やエミュレーションがやや遅いです。
 - キーボードがSandS(Space and Shift)環境だとspace + space で shift + shift を検出してしまいます。代替手段を用意しなければいけません。
 - NIC無効時には動きません。
 - 開発版につき無駄に何回もloadScriptします。メモリ食いすぎ。
 - Python3未対応。Python2系が必要。

#endif

#if __EN__
== Developing component/plugin - Tutorial

  Coming soon.
#elif __JP__

== 拡張モジュール開発

=== tanasinnにおける「拡張モジュール」と「プラグイン」

拡張モジュールは、ファイル単位で認識され、所定のタイミングで実行されるJavascriptコードです。
Vimperatorにおけるプラグインと似たような概念です。
tanasinnにおけるプラグインは、拡張モジュールによりエクスポートされ、必要に応じてロードしたり、すきなとき
にアンロードできるソフトウェア部品です。プラグアンドプレイのための一定の仕様を満たしたソフトウェア的実体、
という感じです。tanasinnバージョン0.1.5.4からは、プラグインマネージャが下図のように依存関係を追跡して
管理しますので、プラグインの動的な有効化・無効化がかなり安全に行えるようになっています。

image::images/pluginview.png[width=780]

=== 拡張モジュール開発に向いている人

以下のような方はぜひ拡張モジュールを書いてみてください。

- Mozilla環境のCUI/TUI的エンハンスに興味を持たれている方
- TUI環境のGUI的エンハンスやWebとの融合に興味を持たれている方
- 端末エミュレーションマニアでVTやTektronixやWyse端末やSixelを実装するのが好きな方

=== 拡張モジュール作成 初級編チュートリアル
  tanasinnの基礎概念の習得からコンポーネント作成を経て、セッションプラグイン作成まで、なるべく飛ばないように
  順を追って説明していきます。
  注：現在、チュートリアルを書いていて、「この説明だるい、まどろっこしい、名前が良くない」と思ったところは思い
     切ってプログラムの方を変更して単純化していますので、サンプルコードがかなりバージョンセンシティブ化しています。
     最新版のtanasinnでお試しください。

==== チュートリアルの方針
  このチュートリアルでは、簡単なtanasinnプラグインの作成過程を、なるべく平易な形で説明していきたいと思います。
  初級編なので、「覚えることを最小限に」をモットーとしたいと思います。
  拡張モジュールを書くためにtanasinnコアのソースをいきなり読みはじめるのはおすすめしません。
  読むと精神的にやられます。
  あのような書き方をせずとも、実はそこそこクリーンなJavascriptコードでプラグインを記述することができます。
  記述は少し冗長になりますが総合的にみてずっと生産的です。
  本チュートリアルではクリーンで単純なサンプル提示を心掛けます。

==== イベントバスの概念
  チュートリアルに入る前に、これだけはどうしても触れておかなければなりません。「イベントバス」です。
  「覚えることを最小限に」をふまえたうえでも、この説明だけはちょっとはずせません。
  tanasinnは結合度的にかなりゆるいタイプのコンポーネントフレームワークを基盤として
  構築されており、コンポーネント間のコミュニケーションは基本、同期的なメッセージ指向です。
  そのメッセージ(セマンティクス上はイベントだったりコマンドだったりget関数だったりする)は、下図に示されるような
  階層化されたバス上を流れています。

.tanasinn Bus Model
image::images/busmodel.png[]

  階層的に構築されたLANのようなものをイメージしてもらえるといいと思います。
  ソフトウェアパターン的には、Observerパターンを階層化したもの、ととらえるとわかりやすいかなと思います。
  このような階層において子要素を持つもの、上図においては、Process、Desktop、Sessionのようなものが、イベントを管理しています。
  tanasinnハッカー達はこれを「イベントブローカー」、あるいは単に「ブローカー」と呼んでいます。
  また逆にこの親要素にぶらさがっているもの、上図においてはProcess以外のノードを、「コンポーネント」と呼んでいます。
  たとえば上の図でいうと、DesktopとSessionはイベントブローカー兼コンポーネントということになります。
  コンポーネント「tty」はSessionというイベントブローカーを介してコンポーネント「screen」にメッセージを送ったりできるわけです。
  イベントはUIウィジェットにおけるそれのようにキャプチャリングされたり、バブリングしたりすることはなく、
  必要なら明示的にルーティングしてやる必要があります。
  またVimperator/KeySnail使い的にはやや戸惑うかと思われますが、ブローカーはその子供(コンポーネント)に対する参照をもちません。
  たとえばSessionというオブジェクトから「tty」への参照を明示的にひっぱってくることができません。
  ややめんどくさいですがtanasinn全体がこのようなルールで構築されています。

==== 準備
  まず、お使いのFirefox/Thunderbird/SeaMonkey等にtanasinnを導入してください。
  以下の説明はtanasinn 0.1.5.4以上の環境を想定しているので、tanasinnは最新版を入れておいてください。
  $HOME/.tanasinnがすでにある場合、以降の説明がtanasinnの実際の動きと食い違うことがあるかもしれませんので、
  リネーム等しておくと、はまらなくてよいです。

==== サンプル1 - エントリーポイント

以下のようなサンプルを作成してください。

.sample1.js
[source,javascript]
----

function main(broker) {
  broker.window.alert(broker);
}

----

  これを、
  %USERPROFILE%¥.tanasinn¥modules¥session_components¥ (Windows)
  $HOME/.tanasinn/modules/session_components/ (Mac/Linux/FreeBSD)
  につっこみます。フォルダ(ディレクトリ)は無いと思うので作成してください。

  この状態でターミナルセッションを開始してみます。
  こうなります。

image::images/sample1.png[width=500]


  ここでもし余裕があればalert関数の中身を変えるなどして、いろいろ実験してみてください。
  聡明な方なら以下のことがわかると思います。

  - このプラグインモジュールのエントリポイントはmainというシンボルをもつ関数。引数にはSessionオジェクトが与えられている。
  - このプラグインモジュールはセッションが開始されるタイミングで読み込み直され、変更等も反映されている。
  - chromeウィンドウオブジェクトはセッションオブジェクトのwindowプロパティでとれる。

  Sessionオブジェクトはセッションバスを管理するブローカーです。
  ターミナルウィンドウがひとつ立ち上がるごとに、Sessionオブジェクトが生成されています。
  windowやdocument等のDOMオブジェクトがコンテキストに入ってきていないことにも注意してください。

==== サンプル2 - イベントとトピック

  今度はセッションバス上を飛び交うメッセージを補足し、他のプラグインとコミュニケートしてみます。簡単です。

.sample2.js
[source,js]
----

function main(broker) {
  broker.subscribe("event/before-input", function(message) {
    broker.notify("command/report-overlay-message", "key pressed: '" + message + "'");
  });
}

----

  下図のように、キーボードを押すたびにオーバーレイインジケータが出てくると思います。

image::images/sample2.png[width=700]

  これは、「input」というコンポーネントからメッセージを受けとり、プラグイン「Overlay Indicator」にデータを
  渡しています。"event/before-input" や "command/report-overlay-message" はイベントソースを識別するた
  めの文字列で、「トピック」と呼ばれています。
/*
  なお余談ですが、tanasinnでプラグインの振舞いを記述しているとこのようなメッセージパッシングが頻出するため、
  特に工夫しない場合たちまちクロージャー地獄に陥ります。
  熟練したtanasinnプログラマはトピックと所定の演算子を組み合わせてイベント式を構築し、ブローカーに対してトリガ条件
  を詳細に指定することがあります。たとえばこんなふうに。

[source,Javascript]
----

broker.subscribe(
  "@(initialized/{tty & screen} & ~variable-changed/renderer.font_{size|family})", 
  function (tty, screen, font_size, font_family) { … })；

----
*/

==== サンプル3 - デバッグ環境をととのえる
  つぎのサンプルにとりかかる前に、デバッグ環境を補強しましょう。
  コンソールを有効化します。

----
enable console
saveprofile
----

image::images/enableconsole.png[width=500]

起動してみましょう。

----
console
----

image::images/console.png[width=770]

すこしコードも書いてみましょう。

.sample3.js
[source,javascript]
----

function main(broker) {
  broker.subscribe("event/before-input", function(message) {
    throw "an error occured !!";
  });
}

----

  なにかキーボードを押して"event/before-input"イベントを発生させるたびに、エラーが補足されます。
  こうなります。

image::images/sample3.png[width=770]

  例外が自動補足されるということは、例外がコンポーネント境界を超えて伝播されないということでもあり
  (実際は伝播させる方法もありますが)、tanasinnは基本、エラーに対してとてもルーズな
  立場をとります。こまめにコンソールをチェックして対処するというケースが多いです。
  テスト機構が完成すれば事情はもうちょっとましになりますが。
  さきほどconsoleを有効化しましたが、通常使用時にはパフォーマンスを下げるので無効化しておいたほうが良いです。
  consoleがなくても、ランタイムディレクトリ以下のlog/tanasinn-js.logを見ればエラー等を診断できます。

----
disable console
saveprofile
----  

==== サンプル4 - コンポーネントオブジェクトの作成

  コンポーネントを作成しましょう。
  コンポーネントはプラグインの一歩手前の、プラグアンドプレイをサポートしない原始的なオブジェクトです。
  tanasinnの規約によるとコンポーネントの最小要件は、以下のとおりです。

  .英数字及びアンダースコア(_)、ハイフン(-)、ドット(.)の組み合せで表現されるString型のidをもつ。
  .メッセージ "get/components" に対して、自分自身を返す。

  コードで表現してみましょう。

.sample4.js
[source,Javascript]
----

function main(broker) {
  var plugin = {
    id: "sample"
  };
  broker.subscribe("get/components", function(message) {
    return plugin;
  });
}

----
  
  コンポーネントの登録に相当する部分です。
  登録というよりも、コンポーネントいるかーとか、メニューアイテムいるかーとか、バスに対して訊いてみて、
  だれかが反応するような感じです。tanasinnではだいたいの事柄がそんなふうに表現されています。ほとんどがメッセージです。
  ただし、idやenabledというシグネチャ等を要求することもあるので部分的にインターフェース指向でもあります。

  今回のサンプルは他のコンポーネントとおしゃべりするための準備だったのですが、このままだと達成感ゼロなので、
  最新ビルドにはlscomponentというコマンドを入れておきました。
  何もしないコマンドなのですが、補完でコンポーネントを列挙します。
  これです。

image::images/sample4.png[width=770]

  今回作成したsampleが、ちゃんとコンポーネントとして認識されています。
  軽く100を超えるコンポーネントからtanasinnが構成されていることがわかりますね。

/*
ブローカーやコンポーネントは通常、ポストコンストラクタ等を用いた2フェーズ初期化のイディオムを採用します。
upstart2が同期メッセージングを採用している理由
*/
   ----- つづく。

=== 拡張モジュール作成 中級編チュートリアル
tanasinnが提供する基礎的なサービスである、イベント式、遅延構築テンプレート、ローカライズ機構、フック機構等の意義と構造を説明し、それらを使用してシーケンスハンドラ、コンプリーター、補完表示ドライバ、エンコーダー・デコーダー、メニューアイテム等、実用的なコンポーネントを作成していく手法を例示します。これらのツールや概念を覚えるとtanasinn拡張を美しく優雅に書くことができますが、tanasinn以外ではまったく役に立ちません。

   ----- coming soon.

=== 拡張モジュール作成 上級編チュートリアル
tanasinn向けにデザインされたMOPシステムtupbaseの概要と、その拡張法について説明します。コアモジュールを読みたい・いじりたい人向け。デスクトップ拡張やプロセス拡張、独自端末モード拡張等についてもここで触れます。これもtanasinn以外ではまったく役に立ちません。

   ----- coming soon.

#endif

== Developing materials

=== Hierarchical event broker pattern
image::images/hebp.png[]

=== Event bus
image::images/busmodel.png[]

=== System stack
image::images/systemstack.png[]

=== Object system

  Coming soon.

==== Class

==== Processing decorated (annotated) member name

==== Attributes

===== persistable

===== watchable

===== listen

===== subscribe

===== sequence

===== command

===== nmap

===== cmap

===== add-hook


=== process.js / Plug-and-play dynamic module loading

  Coming soon.

=== event.js / Event system

Defines class EventBroker, which is able to interpret and evaluate 
"Topic" and "Event Expression".

==== "Topic" Overview

   In this event system, registered events is concerned by "topic" that
   is string variable consists of some digits and alphabets.
    
   If you registered an event as follows:

      var id = broker.subscribe(<topic>, <handler>, ....);

   This event handler could be fired as following code:

      broker.notify(<topic>);

   The subscribe method returns an ID string.
   When you want to unregister handler, use it as follows:

      broker.unsubscribe(id);

   NOTE that this ID is NOT corresponds to a handler, one-to-one.
   The relation between Topic-ID is as same as that, because this event 
   system is based on the concept of multicast delegate system.

image::images/topic.png[]

==== "Event Expression" Overview

   Event Expression indicates how the broker waits multiple events.
   It was given to subscriber method, that called such as: 

      broker.subscribe(<expression>, ....);

   <expression> consists of 1 or multiple event topics and other tokens, 
   that ruled by simple grammar. the detail of it is as below...


==== Grammer of Event Expression

----

   IdentifierCharacter := '_' | '-' | digit | alphabet

   NormalToken := IdentifierCharacter, IdentifierCharacter*

   GlobToken := '{', NormalToken, '}'
              | '{', NormalToken, '}', NormalToken
              | NormalToken, '{', NormalToken, '}'
              | NormalToken, '{', NormalToken, '}', NormalToken

   GlobToken := NormalToken | GlobToken

   PrimaryExpression := Token | '(', Expression, ')'

   UnaryOperator := '@' | '~'

   UnaryExpression := PrimaryExpression | UnaryOperator, PrimaryExpression 

   BinaryOperator := 'and' | 'or' | '&' | '|'

   BinaryExpression := UnaryExpression | UnaryExpression, BinaryOperator, UnaryExpression 

   Expression := BinaryExpression

----

==== Event Expression Example

   - case 1.

----
     "A"  
----
      -> it triggered when the event "A" is signaled.

   - case 2.

----
     "A | B"
----
     -> wait for multiple events "A" OR "B". 
        it is triggered when one of either events is signaled. 

   - case 3.

----
     "A & B"
----
     -> wait for both events "A" AND "B" 
        it is triggered when both of these events is signaled. 




=== ttydriver.py / TTY Driver 
 
==== Module Overview

This module is assumed to be called by tanasinn's "tty.js".
First, tanasinn opens TCP channel and listen on 2 ports, [I/O channel] and 
[Control channel].
Next, tanasinn should call this script, with 2 arguments that is represent 
above-mentioned 2 channel's port numbers.
Then, A TeletypeDriver object is instantiate. it connect these channels and 
establish TCP connection, and finally forks new 4 processes as follows:

. Application Process
   This is user-specified application process, launched by command such as 
   the following.
----
      /bin/sh -c 'exec <startcommand>'
----
   <startcommand> is asked for tanasinn through the <Control channel>.
   
. Writing Process
   This process wait to receive data from tanasinn through <I/O channel>,
   which is user's input key sequence in many cases. 
   As receiving data, the Process passes it to TTY master device as it is.

. Reading Process
   This process wait to receive data from TTY master device, which is output 
   sequence from application program in many cases.
   As receiving data, the Process passes it to tanasinn through [I/O channel].

. Controlling Process
   This process communicate with tanasinn through [Control channel] in 
   simple, lightweight, 7bit ascii-based protocol.

image::images/topic.png[]

   figure-1. Communication among TTY device pair, TeletypeDriver, tanasinn.

==== About [Control channel]'s protocol 

===== Protocol Overview

    . This protocol is line-oriented. line terminator is '\n' (0x0a).

    . This protocol is command-based. 1 line should be interpreted as 1 
       command.
       A command is composed of 1 or multiple tokens. delimiter character is 
       ' ' (0x20).

    . First token is [bold]*opecode*, represent a operation.
       An [bold]*opecode* consists of lower-case alphabetic sets ([a-z]+).

    . Tokens after [bold]*opecode* represent arguments.
       An arguments consists of multiple printable characters, that is 
       encoded in base64 Data Encoding, defined in RFC-3548.
----
       example 1:
         xoff\n
----

         Opecode of this command is "xoff". "\n" is line terminator.
----
       example 2: 
         resize ODA= MjQ=\n
----
         In this case, [bold]*opecode* is "resize".
         Arguments are "ODA=" and "MjQ=", these strings mean "80" and "24"
         when decoded.

=== builder.js / XUL dynamic construction

Accept UI-template object and convert it to a tree of DOM element.

==== UI-template overview
 
  UI-template is JSON-style object that is described as based on the 
  specific rule.
  It is to be converted to a node set of XUL/HTML/SVG elements by 
  "Template Builder" object.
  Dependencies between DOM fragments are automatically resolved.
  You need not to take care of order for building them.

==== Examples

Example 1: 

[source,Javascript]
----

   ({                          // <--- (1)
     tagName: "box",           // <--- (2)
     flex: 1,
     style: {                  // <--- (3)
       backgroundColor: "red"  // <--- (4)
     }
   })

----

   It will be converted to following XUL element.

[source,XML]
----
     <box flex="1" style="background-color: red;"/>
----

   Every UI-template object consists of <Element node> (1), and it is 
   typically a tree set of <Element node>s. 
   It always includes "tagName" property (2), and often includes 
   <Style node> (3).
   <Style node> may have some CSS properties in camel-case (4).

Example 2: 

[source,Javascript]
----

   ({
     tagName: "html:div",
     parentNode: "id-of-parent", // <--- (5)
     style: {
       textAlign: "center"
     }
     childNodes: {               // <--- (6)
       tagName: "html:div",
       style: {
         fontSize: "1.5em"
       },
       childNodes: [             // <--- (7)
         {
           tagName: "html:span",
           innerText: "abcde"    // <--- (8)
         },
         {
           tagName: "html:div",
         }
       ]
     }
   })

----

   It will be converted as below.

[source,XML]
----

   <html:div style="text-align: center;">
     <html:div style="font-size: 1.5em;">
       <html:span>abcde</html:span>
       <html:div/>
     </html:span>
   </html:div>

----

   The "parentNode" property (5) indicates at which the current node is to 
   be set. if the type of property value was "string", it regards as node
   ID of the parent node. or if its type is "object", especially 
   HTMLElement, it regards as the parent node object itself.
   The "childNodes" property has an effect which cascades down 
   following <Element node> (6). If you wanted to create two or more 
   child nodes under the same node, you should substitute an Array of 
   <Element node>s (7) in "childNodes" property.
   The "innerText" property (8) creates a text node under current 
   <Element node>. 

Example 2: 

[source,Javascript]
----

   ({
     tagName: "hbox",
     id: "parent",
     flex: 1,
     onconstruct: {              // <--- (9)
       handler: function() { window.alert(this.id); }
     },
     childNodes: [
       {
         tagName: "vbox",
         id: "left",
         flex: 1,
         listener: {             // <--- (10)
           type: "mouseover",
           context: window,
           handler: onMouseOver
         }
       },
       {
         tagName: "vbox",
         id: "right",
         flex: 1,
         listener: [
           {
             type: "mouseup",
             handler: onMouseUp
           },
           {
             type: "mousedown",
             handler: onMouseDown
           }
         ]
       }
     ]
   })

----

   It almost corresponds to following XUL code.

[source,HTML]
----

   <hbox id="parent" flex="1">
     <vbox id="left" flex="1" onmouseover=""/>
     <vbox id="right" flex="1"/>
   </hbox>
   <script type="application/x-javascript"/>
     <![CDATA[
       var parent = document.getElementById("parent");
       var left = document.getElementById("left");
       var right = document.getElementById("right");
       (function() window.alert(this.id)).apply(parent);
       left.addEventListener("mouseover", function() { 
         onMouseOver.apply(window, arguments); 
       }, false);
       right.addEventListener("mouseup", onMouseUp, false);
       right.addEventListener("mousedown", onMouseOver, false);
     ]]>
   </script>

----

   The "onconstruct" property (9) defines a event function which fired 
   when the property itself is parsed. 
   The "listener" property (10) attaches a event handler at the current 
   <Element node>. 


#if __EN__
== Bug reports and patches

Patches and bug reports are are encouraged. > saitoha <user@zuse.jp>,
or tweet me (http:/#/twitter.com/feel_tanasinn[English] / http:/#/twitter.com/kefir_[Japanese]).
#elif __JP__
== バグレポート

バグレポートを歓迎します。 
とくに文字の問題(Unicodeとか)は優先的にバグ修正する傾向があります。
saitoha <user@zuse.jp> 
twitter: http:/#/twitter.com/kefir_[日本語] / http:/#/twitter.com/feel_tanasinn[英語] 

#endif

